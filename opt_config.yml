General_settings:

  num_cpus: 12
  num_gpus: 2
  num_gpus_per_trial: 1
  num_cpus_per_trial: 6
  num_parallel_trials: 2
  optimization_type: 'tree_parzen_estimators'
  mode: 'max'
  working_directory: None
  ctlearn_config: myconfig.yml
  n_initial_points: 20
  num_max_evals: 40
  random_state: 288
  remove_training_folders: True
  reload_trials: False
  reload_optimization_results: False
  predict: False
  data_set_to_optimize : 'validation'
  metrics_val_to_log: ['auc', 'acc', 'acc_gamma', 'acc_proton', 'loss']
  metrics_pred_to_log: ['auc', 'acc', 'bacc', 'f1', 'prec', 'rec', 'log_loss']
  metric_to_optimize : 'auc'

  user_defined_metric_val:
    label: 'user_defined_val'
    expression: '(auc + accuracy_gamma)*0.5'
    
  user_defined_metric_pred:
    label: 'user_defined_pred'
    expression: '(auc + f1 + sklearn.metrics.balanced_accuracy_score(labels, predicted_class))*0.5'

Optimizer_settings:

  tree_parzen_estimators_config:
    gamma: 0.25

  gaussian_processes_config:
    base_estimator: 'GP'
    acq_function: 'gp_hedge'
    acq_optimizer: 'auto'
    xi: 0.01
    kappa: 1.96

  genetic_algorithm_config:
    max_generation: 5
    population_size: 10
    population_decay: 0.95
    keep_top_ratio: 0.2
    selection_bound: 0.4
    crossover_bound: 0.4 

CTLearn_settings:
  seed: 1234
  num_training_steps_per_validation: 2500
  num_validations: 15
  example_type: 'single_tel'
  model: single_tel
  sorting: null
  min_num_tels: 1
  selected_tel_types: ['MST:NectarCam']
  training_file_list: 'data_train.txt'
  prediction_file_list: 'data_predict.txt'
  batch_size : 64
  model_directory: '/home/jredondo/ctlearn/ctlearn/default_models'
  validation_split: 0.1

Hyperparameters_settings:
  
  hyperparameters_to_log: [number_of_layers, layer1_filters,layer2_filters,layer3_filters,
                    layer4_filters,layer1_kernel, layer2_kernel, layer3_kernel, layer4_kernel]

  config:
    pool_size: ['Model', 'Model Parameters', 'basic', 'conv_block','max_pool','size']
    pool_strides: ['Model', 'Model Parameters', 'basic', 'conv_block','max_pool','strides']
    optimizer_type: ['Training', 'Hyperparameters', 'optimizer']
    base_learning_rate: ['Training', 'Hyperparameters', 'base_learning_rate']
    adam_epsilon: ['Training', 'Hyperparameters', 'adam_epsilon']
    cnn_rnn_dropout: ['Model', 'Model Parameters', 'cnn_rnn', 'dropout_rate']
    layer2_filters: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 1, 'filters']
    layer3_filters: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 2, 'filters']
    layer4_filters: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 3, 'filters']
    layer1_filters: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 0, 'filters']
    layer1_kernel: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 0, 'kernel_size']
    layer2_kernel: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 1, 'kernel_size']
    layer3_kernel: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 2, 'kernel_size']
    layer4_kernel: ['Model', 'Model Parameters', 'basic', 'conv_block', 'layers', 3, 'kernel_size']

  fixed_hyperparameters:
    pool_size: 2
    pool_strides: 2
    optimizer_type: 'Adam'
    base_learning_rate: 5.0e-05
    adam_epsilon: 1.0e-08
    cnn_rnn_dropout: 0.5

  dependent_hyperparameters:

    layer2_filters: '2 * layer1_filters'
    layer3_filters: '4 * layer1_filters'
    layer4_filters: '8 * layer1_filters'

  hyperparameters_to_optimize:

    base_learning_rate:
      type: loguniform
      range: [-5, 0]
    layer1_filters:
      type: 'quniform'
      range: [16, 64]
      step: 1
    layer1_kernel:
      type: 'quniform'
      range: [2, 10]
      step: 1
    layer2_kernel:
      type: 'quniform'
      range: [2, 10]
      step: 1
    layer3_kernel:
      type: 'quniform'
      range: [2, 10]
      step: 1
    layer4_kernel:
      type: 'quniform'
      range: [2, 10]
      step: 1
    optimizer_type:
     type: 'choice'
     range: ['Adadelta', 'Adam', 'RMSProp', 'SGD']
    cnn_rnn_dropout:
     type: 'uniform'
     range: [0,1]

    number_of_layers:
     type: 'conditional'
     range:
        - value: 1
          cond_params:
            layer1_kernel:
              type: 'quniform'
              range: [2, 10]
              step: 1
            layer1_filters:
              type: 'quniform'
              range: [16, 64]
              step: 1
        - value: 2
          cond_params:
            layer1_kernel:
              type: 'quniform'
              range: [2, 10]
              step: 1
            layer1_filters:
              type: 'quniform'
              range: [16, 64]
              step: 1
            layer2_kernel:
              type: 'quniform'
              range: [2, 10]
              step: 1
            layer2_filters:
              type: 'quniform'
              range: [16, 128]
              step: 1
