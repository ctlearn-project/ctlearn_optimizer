=============
Configuration
=============

The configuration of ctlearn_optimizer is stored in a YAML configuration file,
every available settings and its possible values are listed and explained in 
detail in subsequent sections.
 
General settings
==================

- ``num_cpus`` (*mandatory, int*): number of cpu cores the user wishes the optimizer to be configured with. 
- ``num_gpus`` (*mandatory, int*): number of gpus the user wishes the optimizer to be configured with.
- ``num_cpus_per_trial`` (*mandatory, int*): number of cpu cores to allocate per trial. Recommended value: 
  ``num_cpus``/``num_parallel_trials``.
- ``num_gpus_per_trial`` (*mandatory, int*): number of gpus to allocate per trial. Recommended value = 1.
- ``optimization_type`` (*mandatory, str*): optimization algorithm. Valid options: 'tree_parzen_estimators',
  'random_search', 'gaussian_processes', 'genetic_algorithm'.
- ``num_parallel_trials`` (*default = 1, int*):  number of maximum concurrent trials. Recommended value = 1.
- ``mode`` (*default = 'max', str*):  determines whether to maximize or minize the metric. Valid options: 'max', 'min'.
- ``working_directory`` (*default = 'current directory_path', str*): path to the optimizer working directory. 
  Recommended value = default.
- ``ctlearn_config`` (*mandatory, str*): name of the CTLearn config file stored in the ``working_directory``.
- ``n_startup_jobs`` (*default = 30, int*): number of initial random evaluations of the objective before starting to 
  approximating it with the surrogate model. Not used if ``optimization_type`` == 'genetic_algorithm' or 'random_search'. 
- ``num_max_evals`` (*mandatory, int*): number of evaluations of the objective function.
  approximating it with the surrogate model. Not used if ``optimization_type`` == 'genetic_algorithm' or 'random_search'. 
- ``random_state`` (*default = None, [int or None]*): set random state to something other than None for reproducible results. 
  Not used if ``optimization_type`` == 'genetic_algorithm'. 
- ``remove_training_folders`` (*default = True, bool*): determines whether to remove the logging folders generated by CTLearn. 
  This option is useful for avoiding disk space issues in long optimization runs. 
- ``reload_trials`` (*default = False, bool*): set this option to True for loading trials of a past run 
  from ``working_directory/trials.pkl``. This option allows to resume a past optimization run.
- ``reload_optimization_results`` (*default = False, bool*): set this option to True for loading the optimization results file
  of a past run from ``working_directory/optimization_results.csv``.  Recommended value = the same as in ``reload_trials``.
- ``tree_parzen_estimators_config`` (*default = None, dict*): configuration for tree parzen estimators based optimization. 
  Used if ``optimization_type`` == 'tree_parzen_estimators'. Recommend value = default.

    - ``gamma`` (*default = 0.25, float in range (0,1)*): see
      `this paper <https://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf>`_, section 4.
      Recommend value = default.

- ``gaussian_processes_config`` (*default = None, dict*):  configuration for gaussian processes based optimization.
  Used if ``optimization_type`` == 'gaussian_processes'. Recommended value = default.

    - ``base_estimator`` (*default = 'GP', str*): surrogate model to use. Valid options:  'GP', 'RF', 'ET', 'GBRT'.
      'GP': Gaussian Processes; 'RF': Random Forests, 'ET': Extended Trees,
      'GBRT': Gradient Boosted Trees. Recommended value = default.
    - ``acq_function`` (*default = 'gp_hedge', str*): acquisition function to use. Valid options:'LCB', 'EI', 'PI', 'gp_hedge'.
      'LCB': lower confidence bound, 'EI': negative expected improvement, 'PI': negative probability of improvement,
      'gp_hedge': probabilistically choose one of the previous three acquisition functions at every iteration.
      Recommend value = default.
    - ``acq_optimizer`` (*default = 'gp_hedge', str*): method to optimize the acquisition function, the ``base_estimator``
      model is updated with  the optimal value obtained by optimizing ``acq_func`` with ``acq_optimizer``.
      Valid options: 'auto', 'sampling', 'lbfgs'. Recommend value = default.
    - ``xi`` (*default = 0.01, float*):  controls how much improvement the user wants over the previous best values.
      Used when the acquisition is either "EI" or "PI". Recommend value = default.
    - ``kappa`` (*default = 1.96, float*): controls how much of the variance in the predicted values should be taken
      into account. If set to be very high, then we are favouring exploration over exploitation and vice versa.
      Used when the acquisition is "LCB". Recommend value = default.

- ``genetic_algorithm_config`` (*default = None, dict*):  configuration for genetic algorithm based optimization.
  Used if ``optimization_type`` == 'genetic_algorithm'.

    - ``max_generation`` (*mandatory, int*): maximum iteration number of genetic search. This value will be used instead of ``num_max_evals``.
    - ``population_size`` (*mandatory, int*): number of trials of the initial generation. This value will be used instead of ``num_parallel_trials``. 
    - ``population_decay`` (*default = 0.95, float in range(0,1)*): decay ratio of population size for the next generation. 
      Recommend value = default.
    - ``keep_top_ratio:`` (*default = 0.2, float in range(0,1)*): ratio of the top performance population. 
      Recommend value = default.
    - ``keep_top_ratio:`` (*default = 0.4, float in range(0,1)*): threshold for performing selection.
      Recommend value = default.
    - ``keep_top_ratio:`` (*default = 0.4, float in range(0,1)*): threshold for performing crossover.
      Recommend value = default.

- ``predict`` (*default = False, bool*):  whether to predict using the trained CTLearn model.
- ``data_set_to_optimize`` (*default = 'validation', str*): if this option is set to 
  'validation', ``predict`` must be set to True. Valid options: 'validation', 'prediction'. 
- ``metrics_val_to_log`` (*mandatory, list*): validation set metrics to log to the optimization_results file.
  Valid options: ['auc', 'acc', 'acc_gamma', 'acc_proton', 'loss', ``user_defined_metric_val (label)``]. 
  It is required to log at least the metric  that is being optimized, _val will be appended to each metric label logged.
- ``metrics_pred_to_log`` (*default = [], list*): prediction set metrics to log to the optimization_results file.
  Valid options: ['auc', 'acc', 'bacc', 'f1', 'prec', 'rec', 'log_loss', ``user_defined_metric_pred(label)``]. 
  Used if ``predict` == 'True'
  It is required to log at least the metric that is being optimized, _pred will be appended to each metric label logged.
- ``metric_to_optimize`` (*mandatory, str*): label of the metric to optimize. Valid options: any metric included in ``metrics_val_to_log``
  or ``metrics_pred_to_log``.
- ``user_defined_metric_val`` (*default = None, dict*):  configuration for the user defined metric to be computed on 
  the validation set.

    - ``label`` (*mandatory, str*): user_defined_metric_val label.
    - ``expression`` (*mandatory, str*): user_defined_metric_val expression to be computed. This expression has 
      access to ['auc', 'acc', 'acc_gamma', 'acc_proton', 'loss'] (from validation set). 
      Example: 
   .. code-block:: python

      {'expression': '(auc + accuracy_gamma)*0.5'.}

- ``user_defined_metric_pred`` (*default = None, dict*):  configuration for the user defined metric to be computed on the 
  prediction set.

    - ``label`` (*mandatory, str*): user_defined_metric_pred label.
    - ``expression`` (*mandatory, str*): user_defined_metric_pred expression to be computed. This expression has 
      access to ['auc', 'accuracy', 'bacc', 'f1', 'prec', 'rec', 'log_loss'] (from prediction set); besides, expression 
      has access to [labels, gamma_classifier_values, predicted_class] and sklearn.metrics.
      Example:
   .. code-block:: python

      {'expression': '(auc + f1 + sklearn.metrics.balanced_accuracy_score(labels, predicted_class))*0.5'}
      

Basic config settings
=====================

These are CTLearn related configuration options that have been included in
this package in order improve it's functionality and ease of use. The user 
can refer to CTLearn v0.3.0 `example_config file <https://github.com/ctlearn-project/ctlearn/blob/v031/config/example_config.yml>`_
for additional information.

- ``seed`` (*default = None, int*): seed for randomly splitting data into training and validation sets.
- ``num_validations:`` (*mandatory = None, int*):  number of validations made before finishing training. If 0, run forever.
- ``num_training_steps_per_validation`` (*mandatory, int*): number of training steps to run before each evaluation on the validation set.
- ``example_type`` (*mandatory, str*): how to construct examples from the data. Valid options: 'array', 'single_tel'.
- ``model`` (*mandatory, str*):  Valid options: 'cnn_rnn', 'single_tel'. If this option is set to 'cnn_rnn', ``example_type`` must be
  set to 'array',  if this option is set to 'single_tel', ``example_type`` must beset to 'single_tel'
- ``sorting`` (*default = 'null', str*): how to sort telescope images when loading data in array mode. Valid options: 'trigger', 'size', 'null'.
- ``min_num_tels`` (*default = 1, int*): minimum number of triggered telescopes among all selected telescopes (of all types) which 
  must be present for an event to be loaded. Telescopes that aren't selected don't count.
- ``selected_tel_types`` (*mandatory, str*): list of telescope types to load. Valid options: 'LST:LSTCam', 'MST:FlashCam', 'MST:NectarCam',
  'SCT:SCTCam', 'SST:DigiCam', 'SST:ASTRICam', 'SST:CHEC', 'MST:VERITAS'.
- ``training_file_list`` (*mandatory, str*): name of a file stored in the ``working_directory`` 
  listing data file paths for training, one per line.
- ``prediction_file_list`` (*not mandatory, str*): name of a file stored in the ``working_directory`` 
  listing data file paths for predicting, one per line. Mandatory if ``predict`` == True.
- ``batch_size`` (*mandatory, int*):  number of examples per batch for training/prediction. 
- ``model_directory`` (*default = null, str*):  path to directory containing model module. Default if  null is to load
  CTLearn default models directory: 'ctlearn/ctlearn/default_models/'.
- ``validation_split`` (*default = 0.1, float*): randomly chosen fraction of data to set aside for validation.

 
Hyperparameters settings
========================

The choice of the labels of the hyperparameters in this section is left 
to the user , but they must be the same in all the configuration options.

- ``hyperparameters_to_log`` (*mandatory, list*):  labels of  hyperparameters the user wishes to log to the optimization_results file.
  At least one label is mandatory. Example: see opt_config_example.yml
- ``config`` (*mandatory, dict*):  dictionary containing {hyperparameter label : list containing hyperparameter 
  CTLearn configuration} items. The configuration of each hyperparameter label used in  ``fixed_hyperparameters``,
  ``dependent_hyperparameters`` and ``hyperparameters_to_optimize`` subsections must be detailed. 
  Example: see opt_config_example.yml
- ``fixed_hyperparameters`` (*default = None, dict*):  dictionary containing {hyperparameter label : value} items
  for each fixed hyperparameter the user wishes to set in CTLearn config. 
  Example: see opt_config_example.yml
- ``dependent_hyperparameters`` (*default = None, dict*):  dictionary containing {hyperparameter label : expression to evaluate} items
  for each dependent hyperparameter the user. The expression has access to all {hyperparameter label: value} pairs of the
  ``hyperparameters_to_optimize``. 
  Example: see opt_config_example.yml
- ``hyperparameters_to_optimize`` (*Mandatory, dict*):  dictionary containing
  the settings of the hyperparameters the user wishes to optimize 
  following the syntax: {hyperparameter label : {'type': ..., 'range':... 'step':...}.
  See: :mod:`ctlearn_optimizer.bayesian_tpe`, :mod:`ctlearn_optimizer.bayesian_gp` and 
  :mod:`ctlearn_optimizer.genetic_algorithm` for settings options.
  Example: see opt_config_example.yml


  


